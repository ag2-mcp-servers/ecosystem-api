# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:43:33+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from pydantic import conint

from models import (
    GetCategoriesResponse,
    GetCategoryResponse,
    GetCollectionResponse,
    GetCollectionsResponse,
    GetEcosystemResponse,
    GetListingResponse,
    GetListingsResponse,
    GetProductResponse,
    GetProductsResponse,
)

app = MCPProxy(
    contact={'email': 'hello@apideck.com', 'url': 'https://developers.apideck.com'},
    description='Ecosystem API',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Ecosystem API',
    version='0.0.6',
    servers=[{'description': 'Production', 'url': 'https://api.apideck.com'}],
)


@app.get(
    '/ecosystems/{ecosystem_id}',
    description=""" Get ecosystem """,
    tags=['ecosystem_operations'],
)
def ecosystems_one(ecosystem_id: str):
    """
    Get ecosystem
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/categories',
    description=""" List categories """,
    tags=['ecosystem_operations', 'category_operations'],
)
def categories_all(
    ecosystem_id: str,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 50,
):
    """
    List categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/categories/{id}',
    description=""" Get category """,
    tags=['ecosystem_operations', 'category_operations'],
)
def categories_one(ecosystem_id: str, id: str = ...):
    """
    Get category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/categories/{id}/listings',
    description=""" List category listings """,
    tags=['ecosystem_operations', 'category_operations', 'listing_operations'],
)
def category_listings_all(
    ecosystem_id: str,
    id: str = ...,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 50,
):
    """
    List category listings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/collections',
    description=""" List collections """,
    tags=['collection_operations', 'listing_operations'],
)
def collections_all(
    ecosystem_id: str,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 50,
):
    """
    List collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/collections/{id}',
    description=""" Get collection """,
    tags=['ecosystem_operations', 'collection_operations'],
)
def collections_one(ecosystem_id: str, id: str = ...):
    """
    Get collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/collections/{id}/listings',
    description=""" List collection listings """,
    tags=['listing_operations', 'collection_operations'],
)
def collection_listings_all(
    ecosystem_id: str,
    id: str = ...,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 50,
):
    """
    List collection listings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/listings',
    description=""" List listings """,
    tags=['listing_operations'],
)
def listings_all(
    ecosystem_id: str,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 50,
    external_id: Optional[str] = None,
):
    """
    List listings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/listings/{id}',
    description=""" Get listing """,
    tags=['ecosystem_operations', 'listing_operations'],
)
def listings_one(ecosystem_id: str, id: str = ...):
    """
    Get listing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/products',
    description=""" List products """,
    tags=['product_operations', 'listing_operations'],
)
def products_all(ecosystem_id: str):
    """
    List products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/products/{id}',
    description=""" Get product """,
    tags=['ecosystem_operations', 'product_operations'],
)
def products_one(ecosystem_id: str, id: str = ...):
    """
    Get product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ecosystems/{ecosystem_id}/products/{id}/listings',
    description=""" List product listings """,
    tags=['listing_operations', 'product_operations'],
)
def product_listings_all(
    ecosystem_id: str,
    id: str = ...,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 50,
):
    """
    List product listings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
